SVN：代码管理工具，将不同的开发人员的代码进行整合    
    是一个并发版本控制系统，适合在团队协作的时候使用。
    SVN本身是一个通用的版本系统，不仅仅用于源代码的控制，还可以包括文档的控制。

    日常开发的时候，经常遇到同一个文件需要多个人修改，或者同一个项目需要多人协同开发。
    这时候就需要对比代码，检查是否有冲突的修改。如果有冲突以后，还需要解决冲突。


    SVN通过一个中心版本库（服务器），记录所有的文件的修改历史。每个客户端都有一份副本，修改的时候只是在修改副本。修改以后可以把结果提交到中心库。
    在客户端可以更新、对比、检出服务器上的代码，并且发现冲突的时候可以选择合并或者以某个为准。还可以根据历史回滚到某个阶段的版本。

    在项目管理的时候，经常需要对代码打上标签，表示基线、测试、发布等不同阶段的代码，打上标签的代码不会再被修改，但是原始的代码还是可以修改。
    打上标签就相当于是复制了一份只读的代码出来。


    SVN是Apache开发的一套版本控制系统，官方只提供命令界面，图形界面都是由第三方提供的，而且几乎都是开源的。
    所有的图形界面，都是把官方的封装了一套外壳，本质上还是命令界面。



创建版本库
    一般实际工作的时候，不需要自己创建版本库，因为团队共用一个库。
    通常是一个项目一个库，或者多个项目共用一个库。


    默认的目录说明
        一般创建版本库以后，可以对版本库先创建一些目录，每个不同的目录做不同的事情。
        按照约定 : 
            branches : 分支，一个项目可能有多个不同的分支，每个分支大部分代码是相似，只是少量的不同。
            tags     : 标签，要对代码进行测试、发布等项目管理行为的时候，给代码打上标签，通常标签里面的代码是不能再去修改的。
                       标签可以认为就是不同的软件版本。
            trunk    : 主干，代码的主要部分，分支和标签都是从主干上来的。

        这几个目录，不是固定的，具体情况还是要看公司的项目管理制度，通常由配置管理员负责处理这个事情。
        软件配置管理（SCM），专门负责项目的配置管理，包括文档、代码、BUG等记录和跟踪。作用是协调、规范团队的合作。


SVN:存在客户端以及服务端,
服务端的作用：存放代码  
客户端：提交代码、检出代码、删除代码、更新代码


检出代码（check out）
    把版本库里面的代码，复制一个本地副本。
    可以对副本的代码做任何的修改。


提交代码（commit）    在提交代码之前一定要先更新代码 ，
    可以把修改、新增、删除的操作提交到版本库。


更新代码（update）
    当版本库里面的代码发生变化以后，客户端可以更新副本的内容，程序会自动检查版本下载更新（修改、新增、删除）的部分。
    通常建议在提交之前，先进行更新，检查是否有冲突，解决了冲突以后再提交。

删除文件


显示日志信息


svn服务器


代码对比工具beyond使用








